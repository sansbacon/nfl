
from nfl.db.nflpg import NFLPostgres; db = NFLPostgres(user='nfldb', password='cft0911', database='nfldb')
import logging; logger = logging.getLogger(); logger.setLevel(logging.INFO)
from bs4 import BeautifulSoup
html = '''<td class="player-label"><a href="/nfl/players/stephen-gostkowski.php">Stephen Gostkowski</a> <small class="grey">NE</small> <a href="#" class="fp-player-link fp-id-9573" fp-player-name="Stephen Gostkowski"></a><div class=" fpNewsPlayer"><a class=" fpIcon fpNewsIconInfo" href="javascript:void(0);" title="View Player Card" data-fp-id="9573" data-fp-icon="{&quot;sport&quot;:&quot;nfl&quot;,&quot;fpId&quot;:&quot;9573&quot;}" id="fp_icon0" onclick="playercardGenerator.openNewsPopup(event, JSON.parse(this.getAttribute("data-fp-icon")));return false;"></a></div></td>'''
soup = BeautifulSoup(html, 'lxml')
td = soup.find('td')
for child in td:
    print(child)
    
for child in td.children:
    print(child)
    
children = td.children
print(children[0].text)

    
children = list(td.children)
print(children[0].text)
player = {}
children = list(td.children)
player['source_player_name'] = children[0].text
player['source_player_team'] = children[1].text
a = children[2].find_all('a')[-1]
player['source_player_id'] = a.attrs.get('data-fp-id')
print(player)
player = {}
children = list(td.children)
player['source_player_name'] = children[0].text
player['source_player_team'] = children[1]
a = children[2].find_all('a')[-1]
player['source_player_id'] = a.attrs.get('data-fp-id')
print(player)
player = {}
children = list(td.children)
player['source_player_name'] = children[0].text
player['source_player_team'] = children[1]
a = td.find_all('a')[-1]
player['source_player_id'] = a.attrs.get('data-fp-id')
print(player)
player = {}
children = list(td.children)
player['source_player_name'] = children[0].text
player['source_player_team'] = children[1].string
a = td.find_all('a')[-1]
player['source_player_id'] = a.attrs.get('data-fp-id')
print(player)
player = {}
children = list(td.children)
player['source_player_name'] = children[0].text
player['source_player_team'] = children[1].get_text()
a = td.find_all('a')[-1]
player['source_player_id'] = a.attrs.get('data-fp-id')
print(player)
for child in td.children:
    print(type(child))
    
player = {}
children = list(td.children)
player['source_player_name'] = children[1]
player['source_player_team'] = children[3]
player['source_player_id'] = children[-1].attrs.get('data-fp-id')
print(player)
player = {}
children = list(td.children)
player['source_player_name'] = children[1].string
player['source_player_team'] = children[3].string
player['source_player_id'] = children[-1].attrs.get('data-fp-id')
print(player)
for idx, child in enumerate(td.children):
    print(idx, type(child))
    print(child)
    print('-------\n\n')
    
player = {}
children = list(td.children)
player['source_player_name'] = children[0].text
player['source_player_team'] = children[2].text
player['source_player_id'] = children[-1].find('a').attrs.get('data-fp-id')
print(player)
import requests
r = requests.get('https://www.fantasypros.com/nfl/rankings/k.php?week=1')
soup = BeautifulSoup(r.content, 'lxml')
for tr in t.find_all('tr', {'class': re.compile(r'mpb-player')})[0:2]:
    tds = tr.find_all('td')
    print(tds[2].text.split()[-1])
    
for tr in soup.find_all('tr', {'class': re.compile(r'mpb-player')})[0:2]:
    tds = tr.find_all('td')
    print(tds[2].text.split()[-1])
    
import re
for tr in soup.find_all('tr', {'class': re.compile(r'mpb-player')})[0:2]:
    tds = tr.find_all('td')
    print(tds[2].text.split()[-1])
    
for k,v in zip(['best', 'worst', 'avg', 'stdev'], [td.text for td in tds[3:7]]):
    player[k] = v
player
exit()

from nfl.db.nflpg import NFLPostgres; db = NFLPostgres(user='nfldb', password='cft0911', database='nfldb')
import logging; logger = logging.getLogger(); logger.setLevel(logging.INFO)
import requests
r = requests.get('https://www.fantasypros.com/nfl/rankings/k.php?week=1')
soup = BeautifulSoup(r.content, 'lxml')
from bs4 import BeautifulSoup
soup = BeautifulSoup(r.content, 'lxml')
soup.select('h5 time')[0]
soup.select('h5 time')[0].text
soup.select('h5 time')[0].attrs.get('datetime')
soup.select('h5 time')[0].attrs.get('datetime').split()[0]
exit()

from nfl.db.nflpg import NFLPostgres; db = NFLPostgres(user='nfldb', password='cft0911', database='nfldb')
import logging; logger = logging.getLogger(); logger.setLevel(logging.INFO)
import requests
r = requests.get('https://www.fantasypros.com/nfl/rankings/k.php?week=1')
from bs4 import BeautifulSoup
soup = BeautifulSoup(r.content, 'lxml')
for tr in soup.find_all('tr', {'class': re.compile(r'mpb-player')}):
    tds = tr.find_all('td')
    tds1 = tds[1]
    children = list(tds[1].children)
    children
    
import re
for tr in soup.find_all('tr', {'class': re.compile(r'mpb-player')}):
    tds = tr.find_all('td')
    tds1 = tds[1]
    children = list(tds[1].children)
    children
    
for tr in soup.find_all('tr', {'class': re.compile(r'mpb-player')}):
    tds = tr.find_all('td')
    tds1 = tds[1]
    children = list(tds[1].children)
    print(children)
    
for tr in soup.find_all('tr', {'class': re.compile(r'mpb-player')}):
    tds = tr.find_all('td')
    tds1 = tds[1]
    children = list(tds[1].children)
    a = tds[1].find('a', {'href': '#'})
    print(a.attrs.get('data-fp-id'))
    
for tr in soup.find_all('tr', {'class': re.compile(r'mpb-player')}):
    player = {'source': 'fantasypros'}
    tds = tr.find_all('td')

    # tds[0]: rank
    player['source_player_rank'] = tds[0].text

    # tds[1]: player/id/team
    children = list(tds[1].children)
    player['source_player_name'] = children[0].text
    player['source_player_team'] = children[2].text
    a = tds[1].find('a', {'href': '#'})
    if a:
        try:
            player['source_player_id'] = a.attrs['data-fp-id']
        except:
            try:
                player['source_player_id'] = a.attrs['class'][-1].split('-')[-1]
            except (KeyError, ValueError) as e:
                logging.exception(e)
    print(player)
    
r = requests.get('https://www.fantasypros.com/nfl/rankings/rb.php?week=1')
soup = BeautifulSoup(r.content, 'lxml')
for tr in soup.find_all('tr', {'class': re.compile(r'mpb-player')}):
    player = {'source': 'fantasypros'}
    tds = tr.find_all('td')

    # tds[0]: rank
    player['source_player_rank'] = tds[0].text

    # tds[1]: player/id/team
    children = list(tds[1].children)
    player['source_player_name'] = children[0].text
    player['source_player_team'] = children[2].text
    a = tds[1].find('a', {'href': '#'})
    if a:
        try:
            player['source_player_id'] = a.attrs['data-fp-id']
        except:
            try:
                player['source_player_id'] = a.attrs['class'][-1].split('-')[-1]
            except (KeyError, ValueError) as e:
                logging.exception(e)
    print(player)
    
exit()

from nfl.db.nflpg import NFLPostgres; db = NFLPostgres(user='nfldb', password='cft0911', database='nfldb')
import logging; logger = logging.getLogger(); logger.setLevel(logging.INFO)
from nfl.scrapers.ffcalc import FantasyFootballCalculatorScraper
s = FantasyFootballCalculatorScraper()
content = s.adp()
content
get_ipython().magic('load_ext autoreload')
get_ipython().magic('autreload 2')
get_ipython().magic('autoreload 2')
from nfl.parsers.ffcalc import FantasyFootballCalculatorParser
p = FantasyFootballCalculatorParser()
get_ipython().magic('rerun 8-9')
from nfl.parsers.ffcalc import FantasyFootballCalculatorParser
p = FantasyFootballCalculatorParser()
p.adp(content)
get_ipython().magic('rerun 8-9')
from nfl.parsers.ffcalc import FantasyFootballCalculatorParser
p = FantasyFootballCalculatorParser()
p.adp(content)
exit()

from nfl.db.nflpg import NFLPostgres; db = NFLPostgres(user='nfldb', password='cft0911', database='nfldb')
import logging; logger = logging.getLogger(); logger.setLevel(logging.INFO)
from nfl.scrapers.ffnerd import FFNerdNFLScraper
s = FFNerdNFLScraper()
import os
s = FFNerdNFLScraper(api_key=os.getenv('FFNERD_API_KEY'))
s.players()
exit()
